import random                                                           # imports random module

def main():                                                             # defines function
  board = [[' ' for _ in range(3)] for _ in range(3)]                   # creates a 3x3 board
  player1 = 'X'                                                         # defines 'X' to player1
  player2 = 'O'                                                         # defines 'O' to player2
  turn = random.randint(0, 1)                                           # randomly selects the starting player

  while True:                                                           # loop that continues until game over
    # Display the board
    print_board(board)                                                  # prints board

    # Get the player's move
    move = get_move(turn, board)                                        # function passes turn & board as arguments

    # Make the move
    board[move[0]][move[1]] = player1 if turn % 2 == 0 else player2     # updates the board by assigning the symbol

    # Check for a winner
    winner = check_winner(board)                                        # function determines if there is a winner
    if winner is not None:                                              # If winner found
      print(f"Congratulations {winner}! You won!")                      # prints message
      break                                                             # breaks loop, ends the game

    # Switch turns
    turn = 1 - turn                                                     # switches by subtracting the turn from 1

  # Check for a draw
  if winner is None:                                                    # if no winner is found
    print("Game draw.")                                                 # prints a message

def print_board(board):                                                 # function takes board as input & displays it
  for row in board:                                                     # iterates over each row in the board
    print(' | '.join(row))                                              # joins each row elements with ' | '

def get_move(turn, board):                                              # function takes player's turn & board as input
  while True:                                                           # continues until a valid move is entered
    print(f"Player {turn % 2 + 1}'s turn.")                             # prints message on player's turn
    row = int(input("Enter row (1-3): ")) - 1                           # prompts to enter the row for move
    col = int(input("Enter col (1-3): ")) - 1                           # prompts to enter the column for move

    if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' ':        # if row/col values are within the valid range
      return (row, col)                                                 # returns move as tuple of row & column indices

def check_winner(board):                                                # takes board as input & checks for a winner
  for row in range(3):
    if board[row][0] == board[row][1] == board[row][2] != ' ':          # checks rows if 3 cells in row equal/not empty
      return board[row][0]                                              # returns the symbol of the winning player

  for col in range(3):
    if board[0][col] == board[1][col] == board[2][col] != ' ':          # checks col if 3 cells in row equal/not empty
      return board[0][col]                                              # returns the symbol of the winning player

  if board[0][0] == board[1][1] == board[2][2] != ' ':                  # checks diagonal (top-left -> bottom-right)
    return board[0][0]                                                  # returns the symbol of the winning player

  if board[2][0] == board[1][1] == board[0][2] != ' ':                  # checks diagonal (bottom-left -> top-right )
    return board[2][0]                                                  # returns the symbol of the winning player

  return None                                                           # if no winner indicates no winner

if __name__ == "__main__":                                              # checks if the script is being run as the main
  main()                                                                # calls function to execute game
